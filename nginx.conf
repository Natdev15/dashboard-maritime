# PERFORMANCE MODE: Optimized for maximum throughput
worker_processes auto;  # Auto-detect CPU cores
worker_rlimit_nofile 65535;  # Increase file descriptor limit

events {
    # worker_connections 2048;  # Increased for high load
     worker_connections 8192; #I changed
 
    use epoll;  # Efficient event method for Linux
    multi_accept on;  # Accept multiple connections at once
}

http {
    # PERFORMANCE OPTIMIZATIONS
    sendfile on;  # Efficient file transfers
    tcp_nopush on;  # Send headers in one packet
    tcp_nodelay on;  # Don't buffer data-sends

    # keepalive_timeout 30;  # Keep connections alive for reuse
    # keepalive_requests 1000;  # Max requests per connection

    keepalive_timeout 60; #I changed
    keepalive_requests 5000; #I changed

    reset_timedout_connection on;  # Reset timed out connections
    client_body_timeout 30;  # Client body timeout
    send_timeout 30;  # Response timeout
    
    # Upstream definition for Node.js receivers
    upstream nodejs_receivers {
        # Load balancing method
        least_conn;  # Route to server with fewest active connections
        
        # Docker Compose will create multiple instances with these names
        server container-receiver:3001 max_fails=3 fail_timeout=30s;
        
        # Health check
        # keepalive 64;  # Increased for better performance
        keepalive 128; #I changed
    }
    
    # PERFORMANCE MODE: All logging disabled for maximum throughput
    
    # Main server block
    server {
        listen 80;
        server_name localhost;
        
        # Disable all logging for performance
        access_log off;
        error_log /dev/null;
        
        # Increase client body size for compressed data
        client_max_body_size 1M;
        
        # Proxy settings optimized for high performance
        proxy_connect_timeout 3s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        proxy_buffering off;  # Disable buffering for real-time
        proxy_request_buffering off;  # Stream request body
        proxy_http_version 1.1;  # Use HTTP/1.1 for keepalive
        proxy_set_header Connection "";  # Clear connection header for keepalive
        
        # Health check endpoint (direct nginx response)
        location /nginx-health {
            access_log off;
            return 200 "nginx load balancer healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Main container data endpoint
        location /container-data {
            proxy_pass http://nodejs_receivers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # For binary data (struct+zlib)
            proxy_set_header Content-Type $content_type;
        }
        
        # Health check endpoint (proxy to backend)
        location /health {
            proxy_pass http://nodejs_receivers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Statistics endpoint
        location /stats {
            proxy_pass http://nodejs_receivers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Test endpoint
        location /test {
            proxy_pass http://nodejs_receivers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Nginx status for monitoring
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            deny all;
        }
        
        # Default location
        location / {
            proxy_pass http://nodejs_receivers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
} 